#!/bin/bash
set -e

source issue_status.sh

BASE_URL="${SERVICE_BASE_URL}api/assisted-install/v2"

cluster_id=""
while [[ "${cluster_id}" = "" ]]
do
    # Get cluster id
    cluster_id=$(curl -s -S "${BASE_URL}/clusters" | jq -r .[].id)
    if [[ "${cluster_id}" = "" ]]; then
        sleep 2
    fi
done

echo -e "\nInfra env id is ${INFRA_ENV_ID}" 1>&2

required_master_nodes=1 # (TODO: handle with config-image)
required_worker_nodes=0 # (TODO: handle with config-image)
total_required_nodes=$(( ${required_master_nodes}+${required_worker_nodes} ))
echo "Number of required master nodes: ${required_master_nodes}" 1>&2
echo "Number of required worker nodes: ${required_worker_nodes}" 1>&2
echo "Total number of required nodes: ${total_required_nodes}" 1>&2

status_issue="90_start-install"

num_known_hosts() {
    local known_hosts=0
    local insufficient_hosts=0
    host_status=$(curl -s -S "${BASE_URL}/infra-envs/${INFRA_ENV_ID}/hosts" | jq -r .[].status)
    if [[ -n ${host_status} ]]; then
        for status in ${host_status}; do
            if [[ "${status}" == "known" ]]; then
                ((known_hosts+=1))
            fi
            if [ "${status}" == "insufficient" ]; then
                ((insufficient_hosts+=1))
            fi
        done
        echo "Hosts known and ready for cluster installation (${known_hosts}/${total_required_nodes})" 1>&2
    fi
    if (( known_hosts != total_required_nodes )); then
        printf '\\e{yellow}Waiting for all hosts to be ready:\\e{reset}\n%d hosts expected\n%d hosts ready, %d hosts not validated' "${total_required_nodes}" "${known_hosts}" "${insufficient_hosts}" | set_issue "${status_issue}"
    fi
    echo "${known_hosts}"
}

while [[ "${total_required_nodes}" != $(num_known_hosts) ]]
do
    echo "Waiting for hosts to become ready for cluster installation..." 1>&2
    sleep 10
done

echo "All ${total_required_nodes} hosts are ready." 1>&2
clear_issue "${status_issue}"

ignition=$(echo '{{.InstallIgnitionConfig}}' | jq -c --raw-input)
host_ids=$(curl -s -S "${BASE_URL}/infra-envs/${INFRA_ENV_ID}/hosts" | jq -r .[].id)
if [[ -n ${host_ids} ]]; then
    for id in ${host_ids}; do
        args='["--save-partlabel", "agent*"]'
        # Update host's installer-args (for passing '--save-partlabel' to coreos-installer)
        curl -s -S -X PATCH "${BASE_URL}/infra-envs/${INFRA_ENV_ID}/hosts/${id}/installer-args" \
            -H "Content-Type: application/json" \
            -d '{"args": '"${args}"'}'

        # Update host's ignition (used when booting from the installation disk after bootstrap)
        curl -s -S -X PATCH "${BASE_URL}/infra-envs/${INFRA_ENV_ID}/hosts/${id}/ignition" \
            -H "Content-Type: application/json" \
            -d '{"config": '"${ignition}"'}'
    done
fi

